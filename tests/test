tests/
│── test_blockchain.py
│── test_node.py

import unittest
from blockchain import Blockchain

class TestBlockchain(unittest.TestCase):
    def setUp(self):
        self.blockchain = Blockchain()

    def test_genesis_block(self):
        self.assertEqual(self.blockchain.chain[0].index, 0)
        self.assertEqual(self.blockchain.chain[0].previous_hash, "0")

    def test_add_block(self):
        self.blockchain.add_block("Test Data")
        self.assertEqual(len(self.blockchain.chain), 2)
        self.assertEqual(self.blockchain.chain[1].data, "Test Data")

    def test_chain_validity(self):
        self.blockchain.add_block("Block 1")
        self.blockchain.add_block("Block 2")
        self.assertTrue(self.blockchain.is_chain_valid())

if __name__ == '__main__':
    unittest.main()


(API Testing Using Flask's Test Client)

import unittest
import json
from node import app

class TestNodeAPI(unittest.TestCase):
    def setUp(self):
        self.client = app.test_client()

    def test_get_chain(self):
        response = self.client.get('/chain')
        self.assertEqual(response.status_code, 200)
        self.assertIn("chain", response.get_json())

    def test_mine_block(self):
        response = self.client.post('/mine', json={"data": "Test Block"})
        self.assertEqual(response.status_code, 201)
        self.assertIn("block", response.get_json())

if __name__ == '__main__':
    unittest.main()


